<?php

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Render\Markup;
use Drupal\views\ViewExecutable;
use Drupal\views\Render\ViewsRenderPipelineMarkup;
use Psy\Readline\Hoa\Console;

/**
 * @file
 * Primary module hooks for lavoro module.
 */
/**
 * Implements hook_entity_bundle_field_info().
 */
function lavoro_entity_bundle_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle, array $base_field_definitions)
{

  if ($entity_type->id() == "node" && $bundle == "ore_lavorative") {
    $fields = [];
    $fields["giorni_lavorativi"] = BaseFieldDefinition::create("integer")->setLabel("Giorni Lavorativi")->setComputed(TRUE)
      ->setDisplayOptions(
        'view',
        ['label' => 'hidden', 'weight' => -5]
      )->setDisplayConfigurable("view", TRUE)->setClass('\Drupal\lavoro\GiorniLavItemList');
    return $fields;
  }
}
/**
 * Implements hook_views_data_alter().
 */
function lavoro_views_data_alter(array &$data)
{
  $data['node']['giorni_lavorativi'] = [
    'title' => t('Giorni Lavorativi'),
    'field' => [
      'id' => 'lavoro_view_giorni_lavorativi',
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function lavoro_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{

  if ($form_id == "node_ore_lavorative_form" || $form_id == "node_ore_lavorative_edit_form") {
    $form["#validate"][] = "node_ore_lavorative_form_validate";
  }
}
function node_ore_lavorative_form_validate(&$form, \Drupal\Core\Form\FormStateInterface $form_state)
{
  //dpm($form_state);
  $da = $form_state->getValue("field_da");
  $a = $form_state->getValue("field_a");
  if ($da < $a) {
    $form_state->setErrorByName("data", t('La data del campo "Da" non puÃ² essere mggiore di "A"'));
  }
}
/**
 * Implements hook_preprocess_HOOK().
 */
function lavoro_preprocess_views_view_field(&$variables)
{
  /*  $view = $variables["view"];
  $field = $variables["field"];
  $row = $variables["row"];
  date_default_timezone_set('UTC');
  if (isset($view) && $view->id() == "ore_lavorative" && $view->current_display == "ore_lavorative") {

    $da = $row->_entity->get('field_da')->value;
    $a = $row->_entity->get('field_a')->value;
    $ore_lav = $row->_entity->get("field_ore_lav")->value;
    $days = getWorkingDays($da, $a, []);
    $days = $days == 0 ? 1 : $days;
    if ($field->options["id"] == "nothing") {
      $variables["output"] = ViewsRenderPipelineMarkup::create(sprintf("%02s", $days));
    }
    if ($field->options["id"] == "nothing_1") {
      $GGLav = ($ore_lav * $days)  / (8 * 3600);
      $GG = sprintf("%02s", (int) $GGLav);
      $perc = $GGLav - (int) $GGLav;
      $resto = ((8 * 3600) * $perc);
      //dpm($resto);
      $cc = date("H:i", (int)$resto);
      $variables["output"] = ViewsRenderPipelineMarkup::create("<b>$GG gg. $cc</b>");
    }
  } */
}

/**
 * Implements hook_views_pre_render().
 */
function lavoro_views_pre_render(ViewExecutable $view)
{
  /*  date_default_timezone_set('UTC');
  if ($view->id() == "ore_lavorative" && $view->current_display == "ore_lavorative") {
    $tot = 0;
    foreach ($view->result as $key => $row) {
      $da = $row->_entity->get('field_da')->value;
      $a = $row->_entity->get('field_a')->value;
      $ore_lav = $row->_entity->get("field_ore_lav")->value;
      $days = getWorkingDays($da, $a, []);
      //$GGLav = ($ore_lav * $days) / (8 * 3600);
      $tot += ($ore_lav * $days) / (8 * 3600);
    }
    $Giorni = sprintf("%02s", (int) $tot);
    $perc = $tot - (int) $tot;
    $resto = ((8 * 3600) * $perc);
    $ore = date("H:i", (int)$resto);
    $view->attachment_before = Markup::create("<b>Totale: $Giorni gg. $ore</b>");
  } */
}
